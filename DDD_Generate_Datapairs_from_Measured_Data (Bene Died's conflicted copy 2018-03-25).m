%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Volumes/Datentaxi/cellSTORM/130318/MOV2018-03-13-1716real_full.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/03/14 18:32:22

%% Initialize variables.
filename = '/home/useradmin/Dropbox/Dokumente/Promotion/PROJECTS/STORM/MATLAB/LINES/cellSTORM_Groundtruth_from_Thunderstorm_13_3_18/MOV2018-03-13-1716real_intred_small.csv';
delimiter = ',';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%*q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
MOV201803131716realfull = table;
MOV201803131716realfull.frame = cell2mat(raw(:, 1));
MOV201803131716realfull.xnm = cell2mat(raw(:, 2));
MOV201803131716realfull.ynm = cell2mat(raw(:, 3));
MOV201803131716realfull.intensityphoton = cell2mat(raw(:, 4));

%% Clear temporary variables
save('./LINES/GT_from_measured_Data')
eventslocalization = MOV201803131716realfull;

%%/Volumes/Datentaxi/cellSTORM/130318/MOV2018-03-13-1716real_full.csv
% define input and output folder
filename_TIF = 'MOV_2018_03_13_17_16_35_ISO6400_texp_1_15_TIRF_v2_smallresult_realA';
filedir_TIF = '/home/useradmin/Dropbox/Dokumente/Promotion/PROJECTS/STORM/MATLAB/LINES/cellSTORM_Groundtruth_from_Thunderstorm_13_3_18/'
filedir_dest = ['./' filename_TIF '_VIDEO_GENERATED/train'];
fname = [filedir_TIF filename_TIF '.tif'];
% create tif file object
tif_info = imfinfo(fname);
n_frames = size(tif_info,1);


filedir_dest = ['./' filename_TIF '_VIDEO_GENERATED_from_mes/train'];

% mkdir if not exist
if (~exist(filedir_dest, 'dir')); mkdir(filedir_dest ); end%if



%%
my_upscaling_factor = 9;
mysize = [256 256]; mysize = mysize*my_upscaling_factor;
nframes = 6000;

%% define selected frames
my_firstframe = min(eventslocalization.frame);
my_lastframe = max(eventslocalization.frame);
my_selectedframes = linspace(my_firstframe, my_lastframe, nframes);


% mind the dimension x/y to the pixel grid
min_x = min(eventslocalization.xnm);
max_x = max(eventslocalization.xnm);
min_y = min(eventslocalization.ynm);
max_y = max(eventslocalization.ynm);

max_intensity = max(max(eventslocalization.intensityphoton));
norm_intensity = eventslocalization.intensityphoton./max_intensity;

my_xdim = linspace(min_x, max_x, mysize(2));
my_ydim = linspace(min_y, max_y, mysize(1));

%% place the events in each frame

for i = 1:nframes
    
    %% define the current frame number
    my_iter = my_selectedframes(i);
    
    % read the measured frame
    my_mes = imread(fname, uint32(my_iter));
    
    
    
    % create the localizations per frame and draw them
    i_frame_events = (eventslocalization.frame == uint32(my_iter));
    if(sum(i_frame_events) == 0)
        disp('no events visible')
    else
        disp('events visible')
        xevents_i = eventslocalization.xnm(i_frame_events);
        yevents_i = eventslocalization.ynm(i_frame_events);
        
        xevents_i_n = round(xevents_i/max_x*mysize(2));
        yevents_i_n = round(yevents_i/max_y*mysize(1));
        
        % put intensity to into the ring
        %intensity_i = eventslocalization.intensityphoton(i_frame_events);
        intensity_i = 2^8*norm_intensity(i_frame_events);
        max_intensity_i = max(max(intensity_i));
        
        %# create mask for image pixels inside the ellipse polygon
        % BW =
        % poly2mask(xevents_i/max_x*mysize(1),yevents_i/max_y*mysize(2),mysize(1),mysize(2));
        mygt_loc = zeros(mysize); % generate stack of gt
        
        myind = sub2ind(mysize, yevents_i_n, xevents_i_n);
        mygt_loc(myind) = intensity_i;
        
        % blur it to get gauss events
        gausss_kernel = 11;
        try
            mygt_mes = imresize(double(gaussf(mygt_loc, gausss_kernel)), mysize/my_upscaling_factor);
        catch
            mygt_mes = (subsample(gaussf(mygt_loc, gausss_kernel),my_upscaling_factor));
            mygt_mes = mygt_mes-min(mygt_mes);
            mygt_mes = mygt_mes./max(mygt_mes);
            mygt_mes = mygt_mes*max_intensity_i;
            
        end
        
        
        % visualize if necessary
        if(0), cat(3, dip_image(my_mes), mygt_mes), end
        
        % rotate the frames
        rot_angle = mod(i, 4)*pi/2;
        my_mes_rot = affine_trans(my_mes, [1, 1], [0 0], rot_angle);
        mygt_mes_rot = affine_trans(mygt_mes, [1, 1], [0 0], rot_angle);
        
        
        % produce stacked images
        iframe = horzcat(uint8(my_mes_rot), uint8(2*mygt_mes_rot));
        
        % write out the images
        imwrite(iframe, [filedir_dest '/Image_' filename_TIF '_' num2str(i) '.png'])
        disp([num2str(i) '/ ' num2str(n_frames)])
        
    end
end


